-- Generated by Haxe 4.3.6+7124d40
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__haxe_Exception = _hx_e()
__haxe__Int32_Int32_Impl_ = _hx_e()
__haxe__Int64____Int64 = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__kenai_App = _hx_e()
__kenai_core_ArrayListIterator = _hx_e()
__kenai_core__ArrayList_ArrayListAbstract_Impl_ = _hx_e()
__kenai_core__CanvasItem_CanvasItemAbstract_Impl_ = _hx_e()
__kenai_core_DictionaryIterator = _hx_e()
__kenai_core__Dictionary_DictionaryAbstract_Impl_ = _hx_e()
__kenai_core__Element_ElementAbstract_Impl_ = _hx_e()
__kenai_core__Environment_EnvironmentAbstract_Impl_ = _hx_e()
__kenai_core__Event_EventAbstract_Impl_ = _hx_e()
__kenai_core__Font_FontAbstract_Impl_ = _hx_e()
__kenai_core__Image_ImageAbstarct_Impl_ = _hx_e()
__kenai_core__LabelSettings_LabelSettingsAbstract_Impl_ = _hx_e()
__kenai_core__Material_MaterialAbstract_Impl_ = _hx_e()
__kenai_core__Resource_ResourceAbstarct_Impl_ = _hx_e()
__kenai_core__Texture_TextureAbstract_Impl_ = _hx_e()
__kenai_core__Texture2D_Texture2DAbstract_Impl_ = _hx_e()
__kenai_core__Variant_VariantAbstract_Impl_ = _hx_e()
__kenai_core__Viewport_ViewportAbstract_Impl_ = _hx_e()
__kenai_input__InputEvent_InputEventAbstract_Impl_ = _hx_e()
__kenai_input__Shortcut_ShortcutAbstract_Impl_ = _hx_e()
__kenai_spatial__CameraAttributes_CameraAttributesAbstract_Impl_ = _hx_e()
__kenai_spatial__Sky_SkyAbstract_Impl_ = _hx_e()
__kenai_spatial__World3D_World3DAbstract_Impl_ = _hx_e()
__kenai_ui__BaseButton_BaseButtonAbstract_Impl_ = _hx_e()
__kenai_ui__BoxContainer_BoxContainerAbstract_Impl_ = _hx_e()
__kenai_ui__Button_ButtonAbstract_Impl_ = _hx_e()
__kenai_ui__ButtonGroup_ButtonGroupAbstract_Impl_ = _hx_e()
__kenai_ui__CenterContainer_CenterContainerAbstract_Impl_ = _hx_e()
__kenai_ui__Container_ContainerAbstarct_Impl_ = _hx_e()
__kenai_ui__Control_ControlAbstract_Impl_ = _hx_e()
__kenai_ui__Label_LabelAbstract_Impl_ = _hx_e()
__kenai_ui__Panel_PanelAbstract_Impl_ = _hx_e()
__kenai_ui__StyleBox_StyleBoxAbstract_Impl_ = _hx_e()
__kenai_ui__Theme_ThemeAbstract_Impl_ = _hx_e()
__kenai_ui__VBoxContainer_VBoxContainerAbstract_Impl_ = _hx_e()
__support_files_test4_src_Main = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe__Int32_Int32_Impl_.new = {}
__haxe__Int32_Int32_Impl_.__name__ = true
__haxe__Int32_Int32_Impl_.shr = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp(_hx_bit.arshift(a,b)) end;
end
__haxe__Int32_Int32_Impl_.clamp = function(x) 
  do return _hx_bit_clamp(x) end;
end

__haxe__Int64____Int64.new = function(high,low) 
  local self = _hx_new(__haxe__Int64____Int64.prototype)
  __haxe__Int64____Int64.super(self,high,low)
  return self
end
__haxe__Int64____Int64.super = function(self,high,low) 
  self.high = high;
  self.low = low;
end
__haxe__Int64____Int64.__name__ = true
__haxe__Int64____Int64.prototype = _hx_e();

__haxe__Int64____Int64.prototype.__class__ =  __haxe__Int64____Int64

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__kenai_App.new = function() 
  local self = _hx_new(__kenai_App.prototype)
  __kenai_App.super(self)
  return self
end
__kenai_App.super = function(self) 
  self:init();
end
__kenai_App.__name__ = true
__kenai_App.prototype = _hx_e();
__kenai_App.prototype.get_rootElement = function(self) 
  do return _G.rootElement end
end
__kenai_App.prototype.init = function(self) 
end

__kenai_App.prototype.__class__ =  __kenai_App

__kenai_core_ArrayListIterator.new = function(array) 
  local self = _hx_new(__kenai_core_ArrayListIterator.prototype)
  __kenai_core_ArrayListIterator.super(self,array)
  return self
end
__kenai_core_ArrayListIterator.super = function(self,array) 
  self.index = 0;
  self.array = array;
end
__kenai_core_ArrayListIterator.__name__ = true
__kenai_core_ArrayListIterator.prototype = _hx_e();
__kenai_core_ArrayListIterator.prototype.hasNext = function(self) 
  do return self.index < self.array:size() end
end
__kenai_core_ArrayListIterator.prototype.next = function(self) 
  if (self:hasNext()) then 
    local value = self.array:get(self.index);
    self.index = self.index + 1;
    do return value end;
  else
    _G.error(__haxe_Exception.thrown("No more elements in the iterator"),0);
  end;
end

__kenai_core_ArrayListIterator.prototype.__class__ =  __kenai_core_ArrayListIterator

__kenai_core__ArrayList_ArrayListAbstract_Impl_.new = {}
__kenai_core__ArrayList_ArrayListAbstract_Impl_.__name__ = true
__kenai_core__ArrayList_ArrayListAbstract_Impl_.get = function(this1,index) 
  do return this1:get(index) end;
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.set = function(this1,index,value) 
  this1:set(index, value);
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.getArray = function(this1,index) 
  do return this1:get(index) end;
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.setArray = function(this1,index,value) 
  this1:set(index, value);
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.forEach = function(this1,callback) 
  local _g = 0;
  local _g1 = this1:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    callback(this1:get(i));
  end;
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.toArray = function(this1) 
  local result = Array.new();
  local _g = 0;
  local _g1 = this1:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    result[i] = this1:get(i);
  end;
  do return result end;
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.fromArray = function(array) 
  local result = ArrayList.new();
  local _g = 0;
  while (_g < array.length) do _hx_do_first_1 = false;
    
    local item = array[_g];
    _g = _g + 1;
    result:append(item);
  end;
  do return result end;
end
__kenai_core__ArrayList_ArrayListAbstract_Impl_.iterator = function(this1) 
  do return __kenai_core_ArrayListIterator.new(this1) end;
end

__kenai_core__CanvasItem_CanvasItemAbstract_Impl_.new = {}
__kenai_core__CanvasItem_CanvasItemAbstract_Impl_.__name__ = true
__kenai_core__CanvasItem_CanvasItemAbstract_Impl_.fromElement = function(element) 
  local cItem = Element.cast(element);
  if (cItem:isNull()) then 
    do return nil end;
  end;
  do return cItem end;
end

__kenai_core_DictionaryIterator.new = function(dict) 
  local self = _hx_new(__kenai_core_DictionaryIterator.prototype)
  __kenai_core_DictionaryIterator.super(self,dict)
  return self
end
__kenai_core_DictionaryIterator.super = function(self,dict) 
  self.index = 0;
  self.dict = dict;
end
__kenai_core_DictionaryIterator.__name__ = true
__kenai_core_DictionaryIterator.prototype = _hx_e();
__kenai_core_DictionaryIterator.prototype.hasNext = function(self) 
  do return self.index < self.dict:size() end
end
__kenai_core_DictionaryIterator.prototype.next = function(self) 
  if (self:hasNext()) then 
    local key = self.dict:keys():get(self.index);
    self.index = self.index + 1;
    do return key end;
  else
    _G.error(__haxe_Exception.thrown("No more elements in the dictionary."),0);
  end;
end

__kenai_core_DictionaryIterator.prototype.__class__ =  __kenai_core_DictionaryIterator

__kenai_core__Dictionary_DictionaryAbstract_Impl_.new = {}
__kenai_core__Dictionary_DictionaryAbstract_Impl_.__name__ = true
__kenai_core__Dictionary_DictionaryAbstract_Impl_.get = function(this1,key) 
  do return this1:get(key) end;
end
__kenai_core__Dictionary_DictionaryAbstract_Impl_.set = function(this1,key,value) 
  this1:set(key, value);
end
__kenai_core__Dictionary_DictionaryAbstract_Impl_.getArray = function(this1,key) 
  do return this1:get(key) end;
end
__kenai_core__Dictionary_DictionaryAbstract_Impl_.setArray = function(this1,key,value) 
  this1:set(key, value);
end
__kenai_core__Dictionary_DictionaryAbstract_Impl_.forEach = function(this1,func) 
  local keys = this1:keys();
  local _g = 0;
  local _g1 = keys:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local key = keys:get(i);
    func(key, this1:get(key));
  end;
end
__kenai_core__Dictionary_DictionaryAbstract_Impl_.iterator = function(this1) 
  do return __kenai_core_DictionaryIterator.new(this1) end;
end

__kenai_core__Element_ElementAbstract_Impl_.new = {}
__kenai_core__Element_ElementAbstract_Impl_.__name__ = true
__kenai_core__Element_ElementAbstract_Impl_.fromElement = function(element) 
  local element = Element.cast(element);
  if (element:isNull()) then 
    do return nil end;
  end;
  do return element end;
end

__kenai_core__Environment_EnvironmentAbstract_Impl_.new = {}
__kenai_core__Environment_EnvironmentAbstract_Impl_.__name__ = true
__kenai_core__Environment_EnvironmentAbstract_Impl_.fromResource = function(resource) 
  local environment = Environment.cast(resource);
  if (environment:isNull()) then 
    do return nil end;
  end;
  do return environment end;
end

__kenai_core__Event_EventAbstract_Impl_.new = {}
__kenai_core__Event_EventAbstract_Impl_.__name__ = true
__kenai_core__Event_EventAbstract_Impl_.callNoArgs = function(this1) 
  this1:emit();
end
__kenai_core__Event_EventAbstract_Impl_.call = function(this1,...) 
  local args = {...}
  this1:emit(_hx_table.unpack(args));
end

__kenai_core__Font_FontAbstract_Impl_.new = {}
__kenai_core__Font_FontAbstract_Impl_.__name__ = true
__kenai_core__Font_FontAbstract_Impl_.fromResource = function(resource) 
  local font = Font.cast(resource);
  if (font:isNull()) then 
    do return nil end;
  end;
  do return font end;
end

__kenai_core__Image_ImageAbstarct_Impl_.new = {}
__kenai_core__Image_ImageAbstarct_Impl_.__name__ = true
__kenai_core__Image_ImageAbstarct_Impl_.fromResource = function(resource) 
  local img = Image.cast(resource);
  if (img:isNull()) then 
    do return nil end;
  end;
  do return img end;
end

__kenai_core__LabelSettings_LabelSettingsAbstract_Impl_.new = {}
__kenai_core__LabelSettings_LabelSettingsAbstract_Impl_.__name__ = true
__kenai_core__LabelSettings_LabelSettingsAbstract_Impl_.fromResource = function(resource) 
  local labelsettings = LabelSettings.cast(resource);
  if (labelsettings:isNull()) then 
    do return nil end;
  end;
  do return labelsettings end;
end

__kenai_core__Material_MaterialAbstract_Impl_.new = {}
__kenai_core__Material_MaterialAbstract_Impl_.__name__ = true
__kenai_core__Material_MaterialAbstract_Impl_.fromResource = function(resource) 
  local material = Material.cast(resource);
  if (material:isNull()) then 
    do return nil end;
  end;
  do return material end;
end

__kenai_core__Resource_ResourceAbstarct_Impl_.new = {}
__kenai_core__Resource_ResourceAbstarct_Impl_.__name__ = true
__kenai_core__Resource_ResourceAbstarct_Impl_.fromResource = function(resource) 
  local res = Resource.cast(resource);
  if (res:isNull()) then 
    do return nil end;
  end;
  do return res end;
end

__kenai_core__Texture_TextureAbstract_Impl_.new = {}
__kenai_core__Texture_TextureAbstract_Impl_.__name__ = true
__kenai_core__Texture_TextureAbstract_Impl_.fromResource = function(resource) 
  local txt = Texture.cast(resource);
  if (txt:isNull()) then 
    do return nil end;
  end;
  do return txt end;
end

__kenai_core__Texture2D_Texture2DAbstract_Impl_.new = {}
__kenai_core__Texture2D_Texture2DAbstract_Impl_.__name__ = true
__kenai_core__Texture2D_Texture2DAbstract_Impl_.fromResource = function(resource) 
  local txt = Texture2D.cast(resource);
  if (txt:isNull()) then 
    do return nil end;
  end;
  do return txt end;
end

__kenai_core__Variant_VariantAbstract_Impl_.new = {}
__kenai_core__Variant_VariantAbstract_Impl_.__name__ = true
__kenai_core__Variant_VariantAbstract_Impl_.fromString = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toString = function(this1) 
  do return this1:asString() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromInt = function(value) 
  do return Variant.new(__haxe__Int64____Int64.new(__haxe__Int32_Int32_Impl_.shr(value, 31), value)) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toInt = function(this1) 
  do return this1:asInt64() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromInt64 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toInt64 = function(this1) 
  do return this1:asInt64() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromInt32 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toInt32 = function(this1) 
  do return this1:asInt32() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromFloat = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toFloat = function(this1) 
  do return this1:asFloat64() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromBool = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toBool = function(this1) 
  do return this1:asBool() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector2 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector2 = function(this1) 
  do return this1:asVector2() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector3 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector3 = function(this1) 
  do return this1:asVector3() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector4 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector4 = function(this1) 
  do return this1:asVector4() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector2i = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector2i = function(this1) 
  do return this1:asVector2i() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector3i = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector3i = function(this1) 
  do return this1:asVector3i() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector4i = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector4i = function(this1) 
  do return this1:asVector4i() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromColor = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toColor = function(this1) 
  do return this1:asColor() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromRect2 = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toRect2 = function(this1) 
  do return this1:asRect2() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromRect2i = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toRect2i = function(this1) 
  do return this1:asRect2i() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromBasis = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toBasis = function(this1) 
  do return this1:asBasis() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromTransform2D = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toTransform2D = function(this1) 
  do return this1:asTransform2D() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromTransform3D = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toTransform3D = function(this1) 
  do return this1:asTransform3D() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromQuaternion = function(value) 
  do return Variant.new(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toQuaternion = function(this1) 
  do return this1:asQuaternion() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromElement = function(value) 
  do return Variant.fromElement(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toElement = function(this1) 
  do return this1:asElement() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromResource = function(value) 
  do return Variant.fromResource(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toResource = function(this1) 
  do return this1:asResource() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromByteArray = function(value) 
  do return Variant.fromByteArray(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toByteArray = function(this1) 
  do return this1:asByteArray() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromIntArray64 = function(value) 
  do return Variant.fromIntArray64(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toIntArray64 = function(this1) 
  do return this1:asIntArray64() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromFloatArray64 = function(value) 
  do return Variant.fromFloatArray64(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toFloatArray64 = function(this1) 
  do return this1:asFloatArray64() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromStringArray = function(value) 
  do return Variant.fromStringArray(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toStringArray = function(this1) 
  do return this1:asStringArray() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector2Array = function(value) 
  do return Variant.fromVector2Array(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector2Array = function(this1) 
  do return this1:asVector2Array() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector3Array = function(value) 
  do return Variant.fromVector3Array(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector3Array = function(this1) 
  do return this1:asVector3Array() end;
end
__kenai_core__Variant_VariantAbstract_Impl_.fromVector4Array = function(value) 
  do return Variant.fromVector4Array(value) end;
end
__kenai_core__Variant_VariantAbstract_Impl_.toVector4Array = function(this1) 
  do return this1:asVector4Array() end;
end

__kenai_core__Viewport_ViewportAbstract_Impl_.new = {}
__kenai_core__Viewport_ViewportAbstract_Impl_.__name__ = true
__kenai_core__Viewport_ViewportAbstract_Impl_.fromElement = function(element) 
  local viewport = Viewport.cast(element);
  if (viewport:isNull()) then 
    do return nil end;
  end;
  do return viewport end;
end

__kenai_input__InputEvent_InputEventAbstract_Impl_.new = {}
__kenai_input__InputEvent_InputEventAbstract_Impl_.__name__ = true
__kenai_input__InputEvent_InputEventAbstract_Impl_.fromResource = function(resource) 
  local inputEvent = InputEvent.cast(resource);
  if (inputEvent:isNull()) then 
    do return nil end;
  end;
  do return inputEvent end;
end

__kenai_input__Shortcut_ShortcutAbstract_Impl_.new = {}
__kenai_input__Shortcut_ShortcutAbstract_Impl_.__name__ = true
__kenai_input__Shortcut_ShortcutAbstract_Impl_.fromResource = function(resource) 
  local shortcut = InputEventShortcut.cast(resource);
  if (shortcut:isNull()) then 
    do return nil end;
  end;
  do return shortcut end;
end

__kenai_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.new = {}
__kenai_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.__name__ = true
__kenai_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.fromResource = function(resource) 
  local cameraAttributes = CameraAttributes.cast(resource);
  if (cameraAttributes:isNull()) then 
    do return nil end;
  end;
  do return cameraAttributes end;
end

__kenai_spatial__Sky_SkyAbstract_Impl_.new = {}
__kenai_spatial__Sky_SkyAbstract_Impl_.__name__ = true
__kenai_spatial__Sky_SkyAbstract_Impl_.fromResource = function(resource) 
  local sky = Sky.cast(resource);
  if (sky:isNull()) then 
    do return nil end;
  end;
  do return sky end;
end

__kenai_spatial__World3D_World3DAbstract_Impl_.new = {}
__kenai_spatial__World3D_World3DAbstract_Impl_.__name__ = true
__kenai_spatial__World3D_World3DAbstract_Impl_.fromResource = function(resource) 
  local world3D = World3D.cast(resource);
  if (world3D:isNull()) then 
    do return nil end;
  end;
  do return world3D end;
end

__kenai_ui__BaseButton_BaseButtonAbstract_Impl_.new = {}
__kenai_ui__BaseButton_BaseButtonAbstract_Impl_.__name__ = true
__kenai_ui__BaseButton_BaseButtonAbstract_Impl_.fromElement = function(element) 
  local btn = BaseButton.cast(element);
  if (btn:isNull()) then 
    do return nil end;
  end;
  do return btn end;
end

__kenai_ui__BoxContainer_BoxContainerAbstract_Impl_.new = {}
__kenai_ui__BoxContainer_BoxContainerAbstract_Impl_.__name__ = true
__kenai_ui__BoxContainer_BoxContainerAbstract_Impl_.fromElement = function(element) 
  local container = BoxContainer.cast(element);
  if (container:isNull()) then 
    do return nil end;
  end;
  do return container end;
end

__kenai_ui__Button_ButtonAbstract_Impl_.new = {}
__kenai_ui__Button_ButtonAbstract_Impl_.__name__ = true
__kenai_ui__Button_ButtonAbstract_Impl_.fromElement = function(element) 
  local btn = Button.cast(element);
  if (btn:isNull()) then 
    do return nil end;
  end;
  do return btn end;
end

__kenai_ui__ButtonGroup_ButtonGroupAbstract_Impl_.new = {}
__kenai_ui__ButtonGroup_ButtonGroupAbstract_Impl_.__name__ = true
__kenai_ui__ButtonGroup_ButtonGroupAbstract_Impl_.fromResource = function(resource) 
  local bg = ButtonGroup.cast(resource);
  if (bg:isNull()) then 
    do return nil end;
  end;
  do return bg end;
end

__kenai_ui__CenterContainer_CenterContainerAbstract_Impl_.new = {}
__kenai_ui__CenterContainer_CenterContainerAbstract_Impl_.__name__ = true
__kenai_ui__CenterContainer_CenterContainerAbstract_Impl_.fromElement = function(element) 
  local container = CenterContainer.cast(element);
  if (container:isNull()) then 
    do return nil end;
  end;
  do return container end;
end

__kenai_ui__Container_ContainerAbstarct_Impl_.new = {}
__kenai_ui__Container_ContainerAbstarct_Impl_.__name__ = true
__kenai_ui__Container_ContainerAbstarct_Impl_.fromElement = function(element) 
  local container = Container.cast(element);
  if (container:isNull()) then 
    do return nil end;
  end;
  do return container end;
end

__kenai_ui__Control_ControlAbstract_Impl_.new = {}
__kenai_ui__Control_ControlAbstract_Impl_.__name__ = true
__kenai_ui__Control_ControlAbstract_Impl_.fromElement = function(element) 
  local cItem = Control.cast(element);
  if (cItem:isNull()) then 
    do return nil end;
  end;
  do return cItem end;
end

__kenai_ui__Label_LabelAbstract_Impl_.new = {}
__kenai_ui__Label_LabelAbstract_Impl_.__name__ = true
__kenai_ui__Label_LabelAbstract_Impl_.fromElement = function(element) 
  local label = Label.cast(element);
  if (label:isNull()) then 
    do return nil end;
  end;
  do return label end;
end

__kenai_ui__Panel_PanelAbstract_Impl_.new = {}
__kenai_ui__Panel_PanelAbstract_Impl_.__name__ = true
__kenai_ui__Panel_PanelAbstract_Impl_.fromElement = function(element) 
  local panel = Panel.cast(element);
  if (panel:isNull()) then 
    do return nil end;
  end;
  do return panel end;
end

__kenai_ui__StyleBox_StyleBoxAbstract_Impl_.new = {}
__kenai_ui__StyleBox_StyleBoxAbstract_Impl_.__name__ = true
__kenai_ui__StyleBox_StyleBoxAbstract_Impl_.fromResource = function(resource) 
  local styleBox = StyleBox.cast(resource);
  if (styleBox:isNull()) then 
    do return nil end;
  end;
  do return styleBox end;
end

__kenai_ui__Theme_ThemeAbstract_Impl_.new = {}
__kenai_ui__Theme_ThemeAbstract_Impl_.__name__ = true
__kenai_ui__Theme_ThemeAbstract_Impl_.fromResource = function(resource) 
  local theme = Theme.cast(resource);
  if (theme:isNull()) then 
    do return nil end;
  end;
  do return theme end;
end

__kenai_ui__VBoxContainer_VBoxContainerAbstract_Impl_.new = {}
__kenai_ui__VBoxContainer_VBoxContainerAbstract_Impl_.__name__ = true
__kenai_ui__VBoxContainer_VBoxContainerAbstract_Impl_.fromElement = function(element) 
  local vBox = VBoxContainer.cast(element);
  if (vBox:isNull()) then 
    do return nil end;
  end;
  do return vBox end;
end

__support_files_test4_src_Main.new = function() 
  local self = _hx_new(__support_files_test4_src_Main.prototype)
  __support_files_test4_src_Main.super(self)
  return self
end
__support_files_test4_src_Main.super = function(self) 
  self.count = 0;
  __kenai_App.super(self);
end
__support_files_test4_src_Main.__name__ = true
__support_files_test4_src_Main.main = function() 
  __support_files_test4_src_Main.new();
end
__support_files_test4_src_Main.prototype = _hx_e();
__support_files_test4_src_Main.prototype.init = function(self) 
  local _gthis = self;
  _G.print("Hello, World!");
  local control = Control.new();
  self:get_rootElement():addChild(control);
  control:setAnchorsAndOffsetsPreset(15, 3, 0);
  control.sizeFlagsHorizontal = 1;
  control.sizeFlagsVertical = 1;
  local panel = Panel.new();
  control:addChild(panel);
  panel:setAnchorsAndOffsetsPreset(15, 3, 0);
  panel.sizeFlagsHorizontal = 1;
  panel.sizeFlagsVertical = 1;
  panel.offsetBottom = -10;
  panel.offsetTop = 10;
  panel.offsetLeft = -10;
  panel.offsetRight = 10;
  local centerContainer = CenterContainer.new();
  panel:addChild(centerContainer);
  centerContainer:setAnchorsAndOffsetsPreset(15, 3, 0);
  centerContainer.sizeFlagsHorizontal = 1;
  centerContainer.sizeFlagsVertical = 1;
  local vboxContainer = VBoxContainer.new();
  centerContainer:addChild(vboxContainer);
  vboxContainer:setAnchorsAndOffsetsPreset(8, 0, 0);
  vboxContainer.sizeFlagsHorizontal = 0;
  vboxContainer.sizeFlagsVertical = 0;
  self.label = Label.new();
  vboxContainer:addChild(self.label);
  self.label.text = "Hello, World!";
  self.label.verticalAlignment = 1;
  self.label.horizontalAlignment = 1;
  local button = Button.new();
  vboxContainer:addChild(button);
  button.text = "Click Me!";
  self.label.text = Std.string(Std.string("You clicked me! ") .. Std.string(self.count)) .. Std.string(" times");
  button.pressed:connect(function() 
    _gthis:incrementCounter();
  end);
  local size = vboxContainer.size;
  local parentSize = control.size;
  vboxContainer.position.x = (parentSize.x - size.x) / 2;
  vboxContainer.position.y = (parentSize.y - size.y) / 2;
end
__support_files_test4_src_Main.prototype.incrementCounter = function(self) 
  self.count = self.count + 1;
  self.label.text = Std.string(Std.string("You clicked me! ") .. Std.string(self.count)) .. Std.string(" times");
end

__support_files_test4_src_Main.prototype.__class__ =  __support_files_test4_src_Main
__support_files_test4_src_Main.__super__ = __kenai_App
setmetatable(__support_files_test4_src_Main.prototype,{__index=__kenai_App.prototype})
local hasBit32, bit32 = pcall(require, 'bit32')
if hasBit32 then --if we are on Lua 5.1, bit32 will be the default.
  _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end
else
  --If we do not have bit32, fallback to 'bit'
  local hasBit, bit = pcall(require, 'bit')
  if not hasBit then
    error("Failed to load bit or bit32")
  end
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
end

-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  __support_files_test4_src_Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
