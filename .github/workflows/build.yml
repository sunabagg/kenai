name: Build

on:
  #push:
  #  paths-ignore:
  #    - '.gitignore'
  #    - '*.md'
  #    - '*.hx'
  
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC/ 12 AM AKDT

  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        build_type: ['Debug', 'Release']
        config:
          #- { name: '🍏 macOS Clang', os: macos-latest }
          - { name: '🐧 Linux GCC', os: ubuntu-22.04 }
          - { name: '🪟 Windows MSVC', os: windows-latest }
          #- { name: '💪🪟 Windows Arm MSVC', os: windows-11-arm }

    name: 🛠 Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true
          

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: brew install ccache ninja pkgconf lua

      - name: Install Dependencies (Linux)
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build pkg-config libluajit-5.1-2 libluajit-5.1-dev libluajit-5.1-common luajit linux-libc-dev

      - name: Install Dependencies (Windows x64)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco upgrade ccache ninja pkgconfiglite -y

      - name: Install Dependencies (Windows ARM64)
        if: matrix.config.os == 'windows-11-arm'
        run: |
          choco upgrade ninja pkgconfiglite -y

      - name: Setup MSVC (Windows x64)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup MSVC (Windows ARM64)
        if: matrix.config.os == 'windows-11-arm'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64

      - name: ccache
        if: matrix.config.os != 'windows-11-arm'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: '10G'
          key: ${{ matrix.config.os }}-${{ matrix.build_type }}

      - name: Setup Vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'
        
      
      - name: Install vcpkg dependencies
        if: matrix.config.os != 'windows-11-arm'
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg install

      - name: Install vcpkg dependencies (ARM64)
        if: matrix.config.os == 'windows-11-arm'
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg install --triplet arm64-windows

      - name: Configure
        if: matrix.config.os == 'macos-latest' || matrix.config.os == 'ubuntu-22.04' || matrix.config.os == 'windows-latest'
        # For Windows Arm, we handle configuration separately
        run: >
          mkdir GDExtension-build

          cmake
          -B GDExtension-build
          -G "Ninja"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -D CMAKE_C_COMPILER_LAUNCHER=ccache 
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          --install-prefix ${{ github.workspace }}/install-${{ matrix.build_type }}
          .
      
      - name: Configure (Windows Arm)
        if: matrix.config.os == 'windows-11-arm'
        run: >
          mkdir GDExtension-build

          cmake
          -B GDExtension-build
          -G "Visual Studio 17 2022"
          -A arm64
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DVCPKG_TARGET_TRIPLET=arm64-windows
          -D CMAKE_C_COMPILER_LAUNCHER=ccache 
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          --install-prefix ${{ github.workspace }}/install-${{ matrix.build_type }}
          -DUSE_LUAJIT=OFF
          .
      
      - name: Copy luajit lib (Windows)
        if: matrix.config.os == 'windows-latest'
        run: Copy-Item "${{ github.workspace }}\lua51.lib" -Destination "${{ github.workspace }}\GDExtension-build\lua51.lib"

      - name: Copy luajit lib (Windows ARM64)
        if: matrix.config.os == 'windows-11-arm'
        run: Copy-Item "${{ github.workspace }}\lua51-arm64.lib" -Destination "${{ github.workspace }}\GDExtension-build\lua51.lib"


      - name: Build
        run: cmake --build GDExtension-build

      - name: Install
        run: cmake --install GDExtension-build

      - name: Upload artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.os }}-Debug
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/*

      - name: Upload artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.os }}-Release
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/*

      - name: Create archive (Debug) - Windows
        if: matrix.build_type == 'Debug' && runner.os == 'Windows'
        run: |
          cd ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/
          Compress-Archive -Path * -DestinationPath ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Debug.zip -CompressionLevel NoCompression

      - name: Create archive (Debug) - Unix
        if: matrix.build_type == 'Debug' && runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/
          zip -r -0 ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Debug.zip *

      - name: Create archive (Release) - Windows
        if: matrix.build_type == 'Release' && runner.os == 'Windows'
        run: |
          cd ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/
          Compress-Archive -Path * -DestinationPath ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Release.zip -CompressionLevel NoCompression

      - name: Create archive (Release) - Unix
        if: matrix.build_type == 'Release' && runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}/install-${{ matrix.build_type }}/sunaba/
          zip -r -0 ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Release.zip *

      - name: Upload binaries (Debug)
        if: matrix.build_type == 'Debug'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Debug.*
          file_glob: true
          tag: nightly
          overwrite: true

      - name: Upload binaries (Release)
        if: matrix.build_type == 'Release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/${{ github.event.repository.name }}-${{ matrix.config.os }}-Release.*
          file_glob: true
          tag: nightly
          overwrite: true
