#include "theme.h"

void kenai::ui::bindTheme(sol::state_view& lua) {
    lua.new_usertype<Theme>("Theme",
        "new", sol::factories(
            []() { return new Theme(); }
        ),
        sol::base_classes, sol::bases<kenai::core::BaseObject, kenai::core::Resource>(),
        "defaultBaseScale", sol::property(&Theme::getDefaultBaseScale, &Theme::setDefaultBaseScale),
        "defaultFont", sol::property(&Theme::getDefaultFont, &Theme::setDefaultFont),
        "defaultFontSize", sol::property(&Theme::getDefaultFontSize, &Theme::setDefaultFontSize),
        "addType", &Theme::addType,
        "clear", &Theme::clear,
        "clearColor", &Theme::clearColor,
        "clearConstant", &Theme::clearConstant,
        "clearFont", &Theme::clearFont,
        "clearFontSize", &Theme::clearFontSize,
        "clearIcon", &Theme::clearIcon,
        "clearStyleBox", &Theme::clearStyleBox,
        "clearThemeItem", &Theme::clearThemeItem,
        "clearTypeVariation", &Theme::clearTypeVariation,
        "getColor", &Theme::getColor,
        "getColorList", &Theme::getColorList,
        "getColorTypeList", &Theme::getColorTypeList,
        "getConstant", &Theme::getConstant,
        "getConstantList", &Theme::getConstantList,
        "getConstantTypeList", &Theme::getConstantTypeList,
        "getFont", &Theme::getFont,
        "getFontList", &Theme::getFontList,
        "getFontTypeList", &Theme::getFontTypeList,
        "getFontSize", &Theme::getFontSize,
        "getFontSizeList", &Theme::getFontSizeList,
        "getFontSizeTypeList", &Theme::getFontSizeTypeList,
        "getIcon", &Theme::getIcon,
        "getIconList", &Theme::getIconList,
        "getIconTypeList", &Theme::getIconTypeList,
        "getStyleBox", &Theme::getStyleBox,
        "getStyleBoxList", &Theme::getStyleBoxList,
        "getStyleBoxTypeList", &Theme::getStyleBoxTypeList,
        "getThemeItem", &Theme::getThemeItem,
        "getThemeItemList", &Theme::getThemeItemList,
        "getThemeItemTypeList", &Theme::getThemeItemTypeList,
        "getTypeList", &Theme::getTypeList,
        "getTypeVariationBase", &Theme::getTypeVariationBase,
        "getTypeVariationList", &Theme::getTypeVariationList,
        "hasColor", &Theme::hasColor,
        "hasConstant", &Theme::hasConstant,
        "hasDefaultBaseScale", &Theme::hasDefaultBaseScale,
        "hasDefaultFont", &Theme::hasDefaultFont,
        "hasDefaultFontSize", &Theme::hasDefaultFontSize,
        "hasFont", &Theme::hasFont,
        "hasFontSize", &Theme::hasFontSize,
        "hasIcon", &Theme::hasIcon,
        "hasStyleBox", &Theme::hasStyleBox,
        "hasThemeItem", &Theme::hasThemeItem,
        "isTypeVariation", &Theme::isTypeVariation,
        "mergeWith", &Theme::mergeWith,
        "removeType", &Theme::removeType,
        "renameColor", &Theme::renameColor,
        "renameConstant", &Theme::renameConstant,
        "renameFont", &Theme::renameFont,
        "renameFontSize", &Theme::renameFontSize,
        "renameIcon", &Theme::renameIcon,
        "renameStyleBox", &Theme::renameStyleBox,
        "renameThemeItem", &Theme::renameThemeItem,
        "setColor", &Theme::setColor,
        "setConstant", &Theme::setConstant,
        "setFont", &Theme::setFont,
        "setFontSize", &Theme::setFontSize,
        "setIcon", &Theme::setIcon,
        "setStyleBox", &Theme::setStyleBox,
        "setThemeItem", &Theme::setThemeItem,
        "setTypeVariation", &Theme::setTypeVariation,
        "getDefaultTheme", &Theme::getDefaultTheme,
        "cast", [](kenai::core::Resource* res) {
            return new Theme(Object::cast_to<GodotTheme>(res->getResource()));
        }
    );
}